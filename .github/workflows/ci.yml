name: CI Pipeline
# This is a trigger for any push to the repo
on:
  push:
    branches:
      - main
      - develop

jobs:
  # Each job runs in parallel
  backend-test:
    # runs-on indicates which GitHub "Runners" will run this CICD pipeline
    # For all CSE-2102 repos, just use the following line as is
    runs-on: self-hosted
    # This next block allows you to run this ENTIRE job on different python versions
    strategy:
      matrix:
        #python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        python-version: ["3.8"]
    # Steps are run in sequence in this job. If one step fails, the entire job fails.
    steps:
      # Use this next line to pull your repo into the Docker container running the job
      - uses: actions/checkout@v3
      # This block sets up the python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # Pylint is a static code analysis tool. Use this block as is to install pylint
      #  in the Docker container running the job
      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint
      # Run pylint on your pulled code in the Docker container running the job
      - name: Analysing the code with pylint
        run: |
          pylint $(git ls-files './backend/*.py')
      # Pytest is for unit testing your python code. Use this block as is to 
      # install pytest in the Docker container running the job
      - name: Install pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f ./backend/requirements.txt ]; then pip install -r ./backend/requirements.txt; fi
      # initialize database for pytest
      - name: Initialize the database
        run: |
          python -c "
          import sqlite3
          conn = sqlite3.connect('pets.db')
          cursor = conn.cursor()
          cursor.execute('''CREATE TABLE IF NOT EXISTS pets (
                              id INTEGER PRIMARY KEY,
                              name TEXT NOT NULL,
                              breed TEXT,
                              age INTEGER,
                              description TEXT)''')
          cursor.execute('''INSERT INTO pets (name, breed, age, description)
                            VALUES (?, ?, ?, ?)''',
                         ('Buddy', 'Golden Retriever', 3, 'Friendly and active'))
          conn.commit()
          conn.close()
          conn = sqlite3.connect('users.db')
          cursor = conn.cursor()
          cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL UNIQUE)''')
          cursor.execute('''INSERT INTO users (username, email)
                      VALUES(?,?)''',
                      ('Abigail Koval', 'husky@example.com')) 
          conn.commit()
          conn.close() "        
      # Run pytest on your pulled codebase
      - name: Test with pytest
        run: |
          pytest

  react_test_and_lint:
    name: Test and Lint React app
    runs-on: self-hosted
    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: Setup Node.js 
        uses: actions/setup-node@v2 
        with: 
          node-version: '20.3.1' 
 
      # - name: Restore cached dependencies 
      #   id: cache-restore 
      #   uses: actions/cache@v3 
      #   with: 
      #     path: ./src/node_modules 
      #     key: npm-${{ hashFiles('./src/package-lock.json') }} 

      - name: Install dependencies 
        # if: steps.cache-restore.outputs.cache-hit != 'true' 
        run: |
          cd frontend
          npm ci - ignore-scripts
        
      #- name: Test with Jest
       # run: |
        #  pwd
         # cd frontend
          #npm run test

      - name: Eslint
        run: |
          pwd
          cd frontend
          npm run lint
